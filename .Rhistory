Trenton <- tibble(long = c(-74.759720), lat = c(40.220581), names = c("NJ\n1836"))
Atlanta <- tibble(long = c(-84.387985), lat = c(33.748997), names = c("GA\n1757"))
Raleigh <- tibble(long = c(-78.638176), lat = c(35.779591), names = c("NC\n1728"))
p2 <- ggplot(AlcoholMap.df, aes(long, lat)) +
geom_polygon(aes(fill = GreaterThan12Est, group=group), stat= "identity", color = "white") +
#geom_text(aes(label=state), hjust=0.5, vjust=0.5, size=3)
#geom_text(aes(label = BrewriesMPD$count, )) +
scale_fill_gradientn (colours= (heat.colors(3)),na.value="grey90") +
ggtitle( "Alcohol Abuse by State", subtitle = "Geopositional Analysis") +
coord_quickmap()
p2 + geom_text(data = LosAngeles, aes(x = long, y = lat, label = names), hjust = 0.5, vjust=-0.1,nudge_x = 0, color = "black", size=3) +
geom_text(data = Austin, aes(x = long, y = lat, label = names), hjust = 0.8, vjust=-0.1, nudge_x = 0, color = "black", size=3) +
geom_text(data = Orlando, aes(x = long, y = lat, label = names), hjust = 0.5, nudge_x = 0, color = "black", size=3) +
geom_text(data = NewYork, aes(x = long, y = lat, label = names), hjust = 0.5, vjust=-0.2, nudge_x = 0, color = "black", size=3) +
geom_text(data = Chicago, aes(x = long, y = lat, label = names), hjust = 1, vjust=1, nudge_x = 0, color = "black", size=3) +
geom_text(data = Philadelphia, aes(x = long, y = lat, label = names), hjust = 1, vjust=-0.1,nudge_x = 0, color = "black", size=3) +
geom_text(data = Columbus, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Boston, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Trenton, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Atlanta, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Raleigh, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3)
steerDF <- c(7.02, 6.93, 6.42)
sd(steerDF)
steerDF <- c(7.02, 6.93, 6.42, 6.51, 6.07, 5.99, 5.59, 5.80, 5.51, 5.36)
sd(steerDF)
steerDF_variance <- (sd(steerDF))^2
steerDF_variance
log(7.02)
steerDF <- c(log(7.02), log(6.93), log(6.42), log(6.51), log(6.07), log(5.99), log(5.59), log(5.80), log(5.51), log(5.36))
sd(steerDF)
steerDF_variance <- (sd(steerDF))^2
steerDF_variance
steerDF <- c(7.02, 6.93, 6.42, 6.51, 6.07, 5.99, 5.59, 5.80, 5.51, 5.36)
sd(steerDF)
steerDF_variance <- (sd(steerDF))^2
steerDF_variance
steerDF <- c(log(1), log(1), log(2), log(2), log(4), log(4), log(6), log(6), log(8), log(8))
sd(steerDF)
steerDF_variance <- (sd(steerDF))^2
steerDF_variance
baseballSD <- sd(c(206,162,146,142,134,123,106,105,99,98,95,92,86,86,84,84,82,81,72,71,71,62,61,61,61,57,55,52,38,35))
baseballvariance <- baseballSD^2
baseballvariance
wins <- c(95,89,75,97,79,81,88,80,92,94,80,76,61,86,91,83,66,77,96,91,67,85,65,69,69,80,90,81,90,57)
sum((wins-mean(wins))^2)
2*pt(5.48,5,lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
setwd(C:/Job/00_Resource/01 Michael's staff/2019/MSDS/MSDS@SMU/Term1/DS 6371 Statistical Foundations/Assignment/Unit 9)
setwd("C:/Job/00_Resource/01 Michael's staff/2019/MSDS/MSDS@SMU/Term1/DS 6371 Statistical Foundations/Assignment/Unit 9")
baseballDF <- read.csv("Baseball_Data.csv")
cor.test(baseballDF$Payroll,baseballDF$Wins)
cor.test(baseballDF$Payroll,baseballDF$Wins)
reg(baseballDF)
cor.test(baseballDF$Payroll,baseballDF$Wins)
mod <- lm(baseballDF$Wins ~ baseballDF$Payroll)
summary(mod)
?lm
confint(mod)
confint(mod)
confint.lm(mod)
knitr::opts_chunk$set(echo = TRUE)
library(XML)
library(XML)
doc = htmlParse(https://www.kaggle.com/jobs/19781)
library(XML)
doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.monster.com/jobs/search/?q=Data-Science&where=Flower-Mound__2C-TX&jobid=97c8b1b9-3ae2-4e3a-a4ff-241cbda5b711")
doc
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc
library(xml2)
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc
?htmlParse
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
doc = htmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc
lis = getNodeSet(cydoc, "//div[@class = 'skills-section']//
li[@class = 'skill-item']//
span[@class = 'skill-name']")
install.packages("xpath")
doc = xmlParse("https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype=")
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "https://www.cybercoders.com/search/?searchterms=data+science&searchlocation=&newsearch=true&originalsearch=true&sorttype="
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
doc
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "view-source:https://www.espn.com/nfl/team/stats/_/name/dal"
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
doc
players <- xpathSApply(doc,"//li[@class='name']", xmlValue)
players
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "view-source:https://www.espn.com/nfl/team/stats/_/name/dal"
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
players <- xpathSApply(doc,"//li[@class='Team Leaders']", xmlValue)
players
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "view-source:https://www.espn.com/nfl/team/stats/_/name/dal"
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
players <- xpathSApply(doc,"//li[@class='AnchorLink']", xmlValue)
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "view-source:https://www.espn.com/nfl/team/stats/_/name/dal"
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
players <- xpathSApply(doc,"//li[@class='AnchorLink']", xmlValue)
players
library(XML)
#doc = htmlParse("https://www.kaggle.com/jobs/19781")
fileURL <- "view-source:https://www.espn.com/nfl/team/stats/_/name/dal"
doc = htmlTreeParse(fileURL, useInternalNodes = TRUE)
players <- xpathSApply(doc,"//li[@class='AnchorLink']", xmlValue)
players
library(RJSONIO)
library(jsonlite)
sw_data
ls()
search()
cars
cars$speed
speed
attach
attach(cars)
speed
cars
dist
search()
search()
knitr::opts_chunk$set(echo = TRUE)
# Get the data
setwd("C:/Edu/GitHub_DDS/Unit 8")
BeersDF <- read.csv(file = "Beers.csv", header = TRUE)
BreweriesDF <- read.csv(file = "Breweries.csv", header = TRUE)
AlcoholDF <- read.csv(file = "AlcoholAbuse.csv")
# Active library
# Visualization
library(tidyverse)
library(plotly)
library(plyr)
library(dplyr)
library(maps)
library(inspectdf)
library(VIM)
knitr::opts_chunk$set(echo = TRUE)
# Get the data
setwd("C:/Edu/GitHub_DDS/Unit 8")
BeersDF <- read.csv(file = "Beers.csv", header = TRUE)
BreweriesDF <- read.csv(file = "Breweries.csv", header = TRUE)
AlcoholDF <- read.csv(file = "AlcoholAbuse.csv", header = TRUE)
# Active library
# Visualization
library(tidyverse)
library(plotly)
library(plyr)
library(dplyr)
library(maps)
library(inspectdf)
library(VIM)
library(ggthemes)
library(GGally)
library(prettydoc)
# data wrangling
library(stringr)
library(tm)
library(knitr)
library(sqldf)
# classification and modeling
library(class)
library(e1071)
library(caret)
# Count breweries in each state
table(BreweriesDF$State)
Brew_Num <- BreweriesDF %>%
group_by(State) %>%
dplyr::summarize(count=n())
# Plot
Brew_Num$State = factor(Brew_Num$State, level = Brew_Num$State[order(-Brew_Num$count)])
Brew_Num %>%
ggplot(aes(x=State, y=count, fill=State))+geom_bar(stat = "identity", width = 0.8) +
ylab("Brewery")+ggtitle("Brewery vs State")+
geom_text(aes(label=count), hjust=0.4, vjust=-0.3, size=3) +
theme(axis.text.x = element_text(size=7, angle=90))
ggplotly()
mergeDF <- merge(BeersDF, BreweriesDF, by.x = "Brewery_id", by.y = "Brew_ID")
colnames(mergeDF)[2] = "Beer_name"
colnames(mergeDF)[8] = "Brewery_name"
print("The first 6 observations of the merged file:")
head(mergeDF, n=6)
print("The last 6 observations of the merged file:")
tail(mergeDF, n=6)
# Check the missing values in the mergeDF
aggr(mergeDF, prop=FALSE, numbers=TRUE)
matrixplot(mergeDF)
marginplot(mergeDF[c("ABV","IBU")], pch = c(20), col = c("darkgray", "red", "blue"))
IBUNADF <-  mergeDF %>% filter(is.na(IBU))
ABVNADF <-  mergeDF %>% filter(is.na(ABV))
BOTHNADF <- mergeDF %>% filter(is.na(ABV) & is.na(IBU))
# Check which state give the most NA's
summary(IBUNADF$State)
summary(mergeDF$State)
summary(ABVNADF$State)
# NADF <- data.frame(State=State, ALL=summary(mergeDF$State), IBUNA=summary(IBUNADF$State), ABVNA=summary(ABVNADF$State))
# NADF$IBUNAperc <- NADF$IBUNA/NADF$ALL
# NADF$ABVNAperc <- NADF$ABVNA/NADF$ALL
# Calculate IBU and ABV median value of each state
IBUmedianState <- mergeDF %>% filter(!is.na(IBU)) %>% group_by(State) %>% dplyr::summarise(IBUmedian=median(IBU))
ABVmedianState <- mergeDF %>% filter(!is.na(ABV)) %>% group_by(State) %>% dplyr::summarise(ABVmedian=median(ABV))
# Replace IBU NA's with state median value
mergeDF_no_IBU_NA <- left_join(mergeDF, IBUmedianState, by = "State")
mergeDF_no_IBU_NA$IBU[is.na(mergeDF_no_IBU_NA$IBU)]  <- as.character(mergeDF_no_IBU_NA$IBUmedian[is.na(mergeDF_no_IBU_NA$IBU)])
aggr(mergeDF_no_IBU_NA, prop=FALSE, numbers=TRUE) # Still 7 observations IBU NA, because there is no any IBU value available for state
# Replace 7 IBU NA's in SD with grand median value 35.00
mergeDF_no_IBU_NA$IBU = str_replace_na(mergeDF_no_IBU_NA$IBU, replacement =  "35")
mergeDF_no_IBU_NA$IBUmedian = str_replace_na(mergeDF_no_IBU_NA$IBUmedian, replacement =  "35")
# Replace ABV NA's with state median value
mergeDF_noNA <- left_join(mergeDF_no_IBU_NA, ABVmedianState, by = "State")
mergeDF_noNA$ABV[is.na(mergeDF_noNA$ABV)] <- as.character(mergeDF_noNA$ABVmedian[is.na(mergeDF_noNA$ABV)])
aggr(mergeDF_noNA, prop=FALSE, numbers=TRUE)
mergeDF_noNA$IBU <- as.numeric(mergeDF_noNA$IBU)
mergeDF_noNA$ABV <- as.numeric(mergeDF_noNA$ABV)
# Plot
IBU.plotly <- mergeDF_noNA %>% ggplot(aes(x=IBU))+geom_bar()+ggtitle("IBU Distribution") +
theme(axis.text.x = element_text(size = 6, angle = 90))
ggplotly(IBU.plotly)
ABV.plotly <- mergeDF_noNA %>% ggplot(aes(x=ABV))+geom_bar()+ggtitle("ABV Distribution") +
theme(axis.text.x = element_text(size = 6, angle = 90))
ggplotly(ABV.plotly)
# Statistic ABV, IBU
summary(mergeDF_noNA)
# Calculate ABV median value of each state
ABVmedianState <- mergeDF %>% filter(!is.na(ABV)) %>% group_by(State) %>%
dplyr::summarise(ABVmedian=median(ABV))
# Replace 62 NA's in ABV with state level median
mergeDF_no_ABV_NA <- left_join(mergeDF, ABVmedianState, by = "State")
mergeDF_no_ABV_NA$ABV[is.na(mergeDF_no_ABV_NA$ABV)] <-
mergeDF_no_ABV_NA$ABVmedian[is.na(mergeDF_no_ABV_NA$ABV)]
aggr(mergeDF_no_ABV_NA, prop=FALSE, numbers=TRUE)
# Build simple regression model with 1405 pairs of IBU/ABV to get the correlation coef.
mergeDF_tidy <- mergeDF %>% filter(!is.na(IBU) & !is.na(ABV))
mod <- lm(mergeDF_tidy$IBU ~ mergeDF_tidy$ABV)
summary(mod)
Intercept <- mod$coefficients[1]
Slope <- mod$coefficients[2]
# Add new column predicted_IBU base on correlation coef.
# Change negative predicted_IBU to 0, IBU is measured on a scale from 0 to infinite
mergeDF_no_ABV_NA$predict_IBU <- pmax(Intercept + Slope*mergeDF_no_ABV_NA$ABV, 0)
summary(mergeDF_no_ABV_NA$IBU)
# Replace 1005 NA's in IBU with predicted_IBU
mergeDF_no_ABV_NA$IBU[is.na(mergeDF_no_ABV_NA$IBU)] <-
mergeDF_no_ABV_NA$predict_IBU[is.na(mergeDF_no_ABV_NA$IBU)]
summary(mergeDF_no_ABV_NA$IBU)
tidyDF <- mergeDF_no_ABV_NA
aggr(tidyDF, prop=FALSE, numbers=TRUE)
# plot IBU median distribution using IBUmedianState data frame
## Calculate IBU and ABV median value of each state
IBUmedianState <- tidyDF %>% filter(!is.na(IBU)) %>% group_by(State) %>% dplyr::summarise(IBUmedian=median(IBU))
ABVmedianState <- tidyDF %>% filter(!is.na(ABV)) %>% group_by(State) %>% dplyr::summarise(ABVmedian=median(ABV))
## Plot
IBUmedianState$State <- factor(IBUmedianState$State, level = IBUmedianState$State[order(IBUmedianState$IBUmedian)])
IBUmedianState %>% ggplot(aes(x=State, y=IBUmedian, fill=State)) + geom_bar(stat = "identity") + ggtitle("IBU Median in States")+
geom_text(aes(label=IBUmedian), hjust=-0.5) +
theme(axis.text.y = element_text(size = 6)) +
coord_flip()
ggplotly()
# plot ABV median distribution using ABVmedianState data frame
ABVmedianState$State <- factor(ABVmedianState$State, level = ABVmedianState$State[order(ABVmedianState$ABVmedian)])
ABVmedianState %>% ggplot(aes(x=State, y=ABVmedian, fill=State)) + geom_bar(stat = "identity") + ggtitle("ABV Median in States")+
geom_text(aes(label=ABVmedian), hjust=-0.5) +
theme(axis.text.y = element_text(size = 6)) +
coord_flip()
ggplotly()
# plot scatter with 51 pairs of median values of ABV and IBU
ABV_IBU_mergeDF <- merge(ABVmedianState, IBUmedianState, by = "State" )
ABV_IBU_mergeDF$State <- factor(ABV_IBU_mergeDF$State, droplevels(ABV_IBU_mergeDF$State))
ABV_IBU_mergeDF %>% ggplot(aes(x=IBUmedian, y=ABVmedian)) + geom_point()
# Calculate IBU and ABV max value of each state
IBUmaxState <- tidyDF %>% filter(!is.na(IBU)) %>% group_by(State) %>% dplyr::summarise(IBUmax=max(IBU))
ABVmaxState <- tidyDF %>% filter(!is.na(ABV)) %>% group_by(State) %>% dplyr::summarise(ABVmax=max(ABV))
# plot IBU max distribution using IBUmedianState data frame
IBUmaxState$State <- factor(IBUmaxState$State, level = IBUmaxState$State[order(IBUmaxState$IBUmax)])
IBUmaxState %>% ggplot(aes(x=State, y=IBUmax, fill=State)) + geom_bar(stat = "identity") + ggtitle("IBU max in States")+
geom_text(aes(label=IBUmax), hjust=-0.5) +
theme(axis.text.y = element_text(size = 6)) +
coord_flip()
ggplotly()
# plot ABV max distribution using ABVmaxState data frame
ABVmaxState$State <- factor(ABVmaxState$State, level = ABVmaxState$State[order(ABVmaxState$ABVmax)])
ABVmaxState %>% ggplot(aes(x=State, y=ABVmax, fill=State)) + geom_bar(stat = "identity") + ggtitle("ABV max in States")+
geom_text(aes(label=ABVmax), hjust=-0.5) +
theme(axis.text.y = element_text(size = 6)) +
coord_flip()
ggplotly()
summary(tidyDF)
# Create new column for IPA/Ale breakdown
tidyDF$IPA_Ale <- ifelse(str_detect(tidyDF$Style,regex("IPA", ignore_case = TRUE)),"IPA",ifelse(str_detect(tidyDF$Style,regex("Ale",ignore_case = TRUE)),"Ale","Other"))
# Visualization with ABV data
##   Bloxplot
tidyDF %>% ggplot(aes(y=ABV, x=IPA_Ale, fill=as.factor(Ounces))) + geom_boxplot() +
xlab("Ale Types (IPA or ALE)") + ylab("ABV") + ggtitle("Boxplot of ABV vs Ale Type")
tidyDF %>% ggplot(aes(y=ABV, x=as.factor(Ounces), fill=IPA_Ale)) + geom_boxplot() +
xlab("Ounces") + ylab("ABV") + ggtitle("Boxplot of ABV vs Ounces")
##   Histogram
tidyDF %>% ggplot(aes(x=ABV)) + geom_histogram(fill="blue", color="black")
##   Barchart
tidyDF %>% ggplot(aes(x=ABV, fill=IPA_Ale)) + geom_bar(color="black") + xlim(c(0.025,0.100)) +
xlab("Alcohol By Volume (ABV)") + ylab("Beer Name Count") + ggtitle("Ale/IPA Weight vs ABV")
tidyDF %>% ggplot(aes(x=ABV, fill=IPA_Ale)) + geom_bar(color="black", position = "fill") + xlim(c(0.025,0.100)) +
xlab("Alcohol By Volume (ABV)") + ylab("Beer Name Count%") + ggtitle("Ale/IPA Weight% vs ABV")
tidyDF %>% ggplot(aes(x=ABV, fill=as.factor(Ounces))) + geom_bar(color="black") + xlim(c(0.025,0.100)) +
xlab("Alcohol By Volume (ABV)") + ylab("Beer Name Count") + ggtitle("Ounce Weight vs ABV")
# Visualization with IBU data
##   Bloxplot
tidyDF %>% ggplot(aes(y=IBU, x=IPA_Ale, fill=as.factor(Ounces))) + geom_boxplot() +
xlab("Ale Types (IPA or ALE)") + ylab("IBU") + ggtitle("Boxplot of IBU vs Ale Type")
tidyDF %>% ggplot(aes(y=IBU, x=as.factor(Ounces), fill=IPA_Ale)) + geom_boxplot() +
xlab("Ounces") + ylab("IBU") + ggtitle("Boxplot of IBU vs Ounces")
##   Barchart
tidyDF %>% ggplot(aes(x=IBU, group = interaction(IBU, IPA_Ale), fill=IPA_Ale)) + geom_bar(color="black") +
xlab("International Bitterness Units (IBU)") + ylab("Beer Name Count") + ggtitle("Ale/IPA Weight vs IBU")
tidyDF %>% ggplot(aes(x=IBU, group = interaction(IBU, IPA_Ale), fill=IPA_Ale)) + geom_bar(color="black", position = "fill") +
xlab("International Bitterness Units (IBU)") + ylab("Beer Name Count%") + ggtitle("Ale/IPA Weight% vs IBU")
tidyDF %>% ggplot(aes(x=IBU, group = interaction(IBU, IPA_Ale), fill=as.factor(Ounces))) + geom_bar(color="black") +
xlab("International Bitterness Units (IBU)") + ylab("Beer Name Count") + ggtitle("Ounce Weight vs IBU")
# Scatter plot ABV vs. IBU
tidyDF %>% ggplot(aes(x=IBU, y=ABV)) + geom_point(shape=0) + ggtitle("ABV vs IBU") + geom_smooth(method = lm)
tidyDF %>% ggplot(aes(x=IBU, y=ABV, color=IPA_Ale)) + geom_point() + ggtitle("ABV vs IBU") + geom_smooth(method = lm)
tidyDF %>% ggplot(aes(x=IBU, y=ABV, color=IPA_Ale)) + geom_point() + ggtitle("ABV vs IBU") + facet_wrap(~State)
tidyDF %>% ggplot(aes(x=IBU, y=ABV, color=IPA_Ale)) + geom_point() + ggtitle("ABV vs IBU") + facet_wrap(~as.factor(Ounces))
# Scatter plot and Pearson's correlation with original data
mergeDF %>% filter(!is.na(IBU) & !is.na(ABV)) %>%
ggplot(aes(x=ABV, y=IBU)) +
geom_point(aes(color=State), size=1, position="jitter") +
geom_smooth(method = lm) +
theme_wsj() +
xlab("ABV") + ylab("IBU") +
ggtitle("Relationship between IBU and ABV")
ggplotly()
mergeDF_tidy <- mergeDF %>% filter(!is.na(IBU) & !is.na(ABV))
cor.test(mergeDF_tidy$IBU, mergeDF_tidy$ABV)
mod <- lm(mergeDF_tidy$IBU ~mergeDF_tidy$ABV)
summary(mod)
# Scatter plot and Pearson's correlation with tidy data (no missing value)
tidyDF %>% ggplot(aes(x=ABV, y=IBU)) +
geom_point(aes(color=State), size=1, position="jitter") +
geom_smooth(method = lm) +
ggtitle("Relationship between IBU and ABV")
ggplotly()
cor.test(tidyDF$IBU, tidyDF$ABV)
mod1 <- lm(tidyDF$IBU ~ tidyDF$ABV)
summary(mod1)
#Correlations
Corl <- inspect_cor(mergeDF)
show_plot (Corl) + ggtitle("Correlation Between All Attributes")
# Sctter Plot
mergeDF %>% ggplot(aes(x=IBU, y=ABV)) + geom_point(aes(color=State), size=1, position="jitter") + geom_smooth()
# Plot GGpairs
tidyDF %>%
select(ABV, IBU, IPA_Ale) %>%
ggpairs(mapping = aes(color = IPA_Ale))
table(tidyDF$IPA_Ale) # Ale:963, IPA:571, Other:876
# Check the Ale: 2nd time with regex(): # Ale:1007, IPA:571, Other:832
tidyDF.knn <- tidyDF %>% filter(IPA_Ale == "IPA" | IPA_Ale == "Ale")
##
set.seed(1234)
splitPerc = .75
iterations = 50
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(tidyDF.knn)[1],round(splitPerc * dim(tidyDF.knn)[1]))
train = tidyDF.knn[trainIndices,]
test = tidyDF.knn[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPA_Ale, prob = TRUE, k = i)
table(classifications,test$IPA_Ale)
CM = confusionMatrix(table(classifications,test$IPA_Ale))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
maxMeanAcc = max(MeanAcc) # k=?
plot(seq(1,numks,1),MeanAcc, type = "l")
classifications5 = knn(train[,c(4,5)],test[,c(4,5)],train$IPA_Ale, prob = TRUE, k = 5)
table(classifications5,test$IPA_Ale)
CM5 = confusionMatrix(table(classifications5,test$IPA_Ale))
CM5
set.seed(1234)
splitPerc = .80
iterations = 50
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(tidyDF.knn)[1],round(splitPerc * dim(tidyDF.knn)[1]))
train = tidyDF.knn[trainIndices,]
test = tidyDF.knn[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(4,5)],test[,c(4,5)],train$IPA_Ale, prob = TRUE, k = i)
table(classifications,test$IPA_Ale)
CM = confusionMatrix(table(classifications,test$IPA_Ale))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
maxMeanAcc = max(MeanAcc) # k=?
plot(seq(1,numks,1),MeanAcc, type = "l")
classifications5 = knn(train[,c(4,5)],test[,c(4,5)],train$IPA_Ale, prob = TRUE, k = 6)
table(classifications5,test$IPA_Ale)
CM5 = confusionMatrix(table(classifications5,test$IPA_Ale))
CM5
# Check Budweiser profile
# Neither Budweiser nor Anheuser-Busch can be found in list of Brewery_name
# We cannot build Budweiser profile with the available data set
# Benchmarking with competitors will not be realistic
tidyDF$BudweiserOrOther <- ifelse(str_detect(tidyDF$Brewery_name,regex("Budweiser", ignore_case = TRUE)),"Budweiser","Other")
table(tidyDF$BudweiserOrOther)
head(tidyDF %>% filter(BudweiserOrOther=="Budweiser"),n=50)
lookup = data.frame(abb=state.abb, state= state.name )
#View(lookup)
# add new column to tidyDF with lower case state codes to user to merge with lookup DF
abb = unlist(str_split(str_replace_all(tidyDF$State,"[^[:alnum:] ]", ""), boundary("word")))
tidyDF$abb <- as.factor(abb)
#View(tidyDF)
# create a new data set with BrewriesDF and lookup data
BrewriesDF1 = merge(tidyDF,lookup,"abb")
#View(BrewriesDF1)
# count # of sate in Acu2 data frame
BrewriesMPD= count(BrewriesDF1,"state")
#View(BrewriesMPD)
# Change the name of the count column to Brewreies Count
colnames(BrewriesMPD)[2] = "BrewriesCnt"
#change the names of the states to lower case.
BrewriesMPD$region <- tolower(BrewriesMPD$state)
# get the longi/lat of the states in order to draw the map
states <- map_data("state")
#View(states)
#merge the states long/lat data with AcuMap data
map.df <- left_join(states,BrewriesMPD, by = "region")
#View(map.df)
# Plot the data on map
ggplot(map.df, aes(long, lat, group = group))+
geom_polygon(aes(fill = BrewriesCnt ), stat= "identity", color = "white")+
#geom_text(aes(label=state), hjust=0.5, vjust=0.5, size=3)
#geom_text(aes(label = BrewriesMPD$count, )) +
scale_fill_gradientn (colours= (heat.colors(3)),na.value="grey90")+
ggtitle( "Breweries by State", subtitle = "Geopositional Analysis")
# Analyze External Datasource AlcoholDF
AlcoholDF$region <- tolower(AlcoholDF$State)
# AlcoholDF$NumTot <- as.numeric(AlcoholDF$Total)
AlcoholDF$NumTot <- as.numeric(AlcoholDF$GreaterThan12Est)
AlcoholDF$chaTot<- as.character(AlcoholDF$NumTot)
AlcoholMap.df <- left_join(states,AlcoholDF, by = "region")
# Top10 cities latitude and longitude
LosAngeles <- tibble(long = c(-118.243683), lat = c(34.052235), names = c("CA\n7726"))
Austin <- tibble(long = c(-97.743057), lat = c(30.267153), names = c("TX\n5302"))
Orlando <- tibble(long = c(-81.379234), lat = c(28.538336), names = c("FL\n4370"))
NewYork <- tibble(long = c(-76.147423), lat = c(43.048122), names = c("NY\n4201"))
Chicago <- tibble(long = c(-87.629799), lat = c(41.878113), names = c("IL\n2949"))
Philadelphia <- tibble(long = c(-75.165222), lat = c(39.952583), names = c("PA\n2909"))
Columbus <- tibble(long = c(-82.998795), lat = c(39.961178), names = c("OH\n2425"))
Boston <- tibble(long = c(-71.058884), lat = c(42.360081), names = c("MA\n1851"))
Trenton <- tibble(long = c(-74.759720), lat = c(40.220581), names = c("NJ\n1836"))
Atlanta <- tibble(long = c(-84.387985), lat = c(33.748997), names = c("GA\n1757"))
Raleigh <- tibble(long = c(-78.638176), lat = c(35.779591), names = c("NC\n1728"))
p2 <- ggplot(AlcoholMap.df, aes(long, lat)) +
geom_polygon(aes(fill = GreaterThan12Est, group=group), stat= "identity", color = "white") +
#geom_text(aes(label=state), hjust=0.5, vjust=0.5, size=3)
#geom_text(aes(label = BrewriesMPD$count, )) +
scale_fill_gradientn (colours= (heat.colors(3)),na.value="grey90") +
ggtitle( "Alcohol Abuse by State", subtitle = "Geopositional Analysis") +
coord_quickmap()
p2 + geom_text(data = LosAngeles, aes(x = long, y = lat, label = names), hjust = 0.5, vjust=-0.1,nudge_x = 0, color = "black", size=3) +
geom_text(data = Austin, aes(x = long, y = lat, label = names), hjust = 0.8, vjust=-0.1, nudge_x = 0, color = "black", size=3) +
geom_text(data = Orlando, aes(x = long, y = lat, label = names), hjust = 0.5, nudge_x = 0, color = "black", size=3) +
geom_text(data = NewYork, aes(x = long, y = lat, label = names), hjust = 0.5, vjust=-0.2, nudge_x = 0, color = "black", size=3) +
geom_text(data = Chicago, aes(x = long, y = lat, label = names), hjust = 1, vjust=1, nudge_x = 0, color = "black", size=3) +
geom_text(data = Philadelphia, aes(x = long, y = lat, label = names), hjust = 1, vjust=-0.1,nudge_x = 0, color = "black", size=3) +
geom_text(data = Columbus, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Boston, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Trenton, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Atlanta, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3) +
geom_text(data = Raleigh, aes(x = long, y = lat, label = names), hjust = 0, nudge_x = 0, color = "black", size=3)
# Get the data
setwd("C:/Edu/GitHub_DDS/Unit 8")
BeersDF <- read.csv(file = "Beers.csv", header = TRUE)
BreweriesDF <- read.csv(file = "Breweries.csv", header = TRUE)
AlcoholDF <- read.csv(file = "AlcoholAbuse.csv", header = TRUE)
setwd("C:/Edu/GitHub_DDS/Unit 8")
